import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import {
  Copy,
  QrCode,
  AlertTriangle,
  Wallet,
  ExternalLink,
  CheckCircle,
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface CryptoDepositModalProps {
  isOpen: boolean;
  onClose: () => void;
  asset: {
    name: string;
    symbol: string;
    icon: string;
  };
}

const CryptoDepositModal = ({ isOpen, onClose, asset }: CryptoDepositModalProps) => {
  const [selectedToken, setSelectedToken] = useState('paxg');
  const [selectedNetwork, setSelectedNetwork] = useState('ethereum');
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  // Get available tokens based on asset
  const getAvailableTokens = () => {
    const baseTokens = [
      {
        id: 'usdc',
        name: 'USDC',
        description: 'USD Coin - Stablecoin',
        icon: 'ðŸ’µ',
        networks: ['ethereum', 'polygon', 'arbitrum'],
      },
      {
        id: 'usdt',
        name: 'USDT',
        description: 'Tether USD - Stablecoin',
        icon: 'ðŸ’µ',
        networks: ['ethereum', 'polygon', 'tron'],
      },
    ];

    // Add asset-specific synthetic tokens
    if (asset.symbol === 'XAU') {
      baseTokens.unshift({
        id: 'paxg',
        name: 'PAXG',
        description: 'Pax Gold - Gold-backed token',
        icon: 'ðŸ¥‡',
        networks: ['ethereum'],
      });
    } else if (asset.symbol === 'XAG') {
      baseTokens.unshift({
        id: 'xag-token',
        name: 'XAG Token',
        description: 'Silver-backed synthetic token',
        icon: 'ðŸ¥ˆ',
        networks: ['ethereum', 'polygon'],
      });
    }

    return baseTokens;
  };

  const availableTokens = getAvailableTokens();
  const selectedTokenData = availableTokens.find(t => t.id === selectedToken);

  const getNetworks = () => [
    {
      id: 'ethereum',
      name: 'Ethereum',
      description: 'ETH Network',
      icon: 'âŸ¡',
      fee: 'High',
    },
    {
      id: 'polygon',
      name: 'Polygon',
      description: 'MATIC Network',
      icon: 'ðŸŸ£',
      fee: 'Low',
    },
    {
      id: 'arbitrum',
      name: 'Arbitrum',
      description: 'ARB Network',
      icon: 'ðŸ”µ',
      fee: 'Medium',
    },
    {
      id: 'tron',
      name: 'Tron',
      description: 'TRX Network',
      icon: 'ðŸ”´',
      fee: 'Low',
    },
  ];

  const networks = getNetworks().filter(
    network => selectedTokenData?.networks.includes(network.id)
  );

  // Mock deposit address (in production, this would be generated by backend)
  const getDepositAddress = () => {
    const addresses = {
      ethereum: '0x742d35Cc6635C0532925a3b8D123456789ABCDEF',
      polygon: '0x742d35Cc6635C0532925a3b8D987654321FEDCBA',
      arbitrum: '0x742d35Cc6635C0532925a3b8D456789ABCDEF123',
      tron: 'TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE',
    };
    return addresses[selectedNetwork as keyof typeof addresses] || addresses.ethereum;
  };

  const depositAddress = getDepositAddress();

  const handleCopyAddress = async () => {
    try {
      await navigator.clipboard.writeText(depositAddress);
      setCopied(true);
      toast({
        title: 'Address Copied!',
        description: 'Deposit address has been copied to clipboard.',
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast({
        title: 'Copy Failed',
        description: 'Please copy the address manually.',
        variant: 'destructive',
      });
    }
  };

  const handleViewInExplorer = () => {
    const explorerUrls = {
      ethereum: `https://etherscan.io/address/${depositAddress}`,
      polygon: `https://polygonscan.com/address/${depositAddress}`,
      arbitrum: `https://arbiscan.io/address/${depositAddress}`,
      tron: `https://tronscan.org/#/address/${depositAddress}`,
    };
    
    const url = explorerUrls[selectedNetwork as keyof typeof explorerUrls];
    if (url) {
      window.open(url, '_blank');
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-lg max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <span className="text-2xl">{asset.icon}</span>
            Deposit {asset.name}
            <Badge variant="secondary" className="ml-auto">
              Crypto Deposit
            </Badge>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Token Selection */}
          <div className="space-y-3">
            <Label>Select Token</Label>
            <RadioGroup value={selectedToken} onValueChange={setSelectedToken}>
              {availableTokens.map(token => (
                <div
                  key={token.id}
                  className="flex items-center space-x-3 p-4 border rounded-lg"
                >
                  <RadioGroupItem value={token.id} id={token.id} />
                  <div className="text-2xl">{token.icon}</div>
                  <div className="flex-1">
                    <Label htmlFor={token.id} className="font-medium">
                      {token.name}
                    </Label>
                    <div className="text-sm text-muted-foreground">
                      {token.description}
                    </div>
                  </div>
                  {token.id === 'paxg' && (
                    <Badge variant="default" className="text-xs">
                      Recommended
                    </Badge>
                  )}
                </div>
              ))}
            </RadioGroup>
          </div>

          {/* Network Selection */}
          <div className="space-y-3">
            <Label>Select Network</Label>
            <RadioGroup value={selectedNetwork} onValueChange={setSelectedNetwork}>
              {networks.map(network => (
                <div
                  key={network.id}
                  className="flex items-center space-x-3 p-4 border rounded-lg"
                >
                  <RadioGroupItem value={network.id} id={network.id} />
                  <div className="text-2xl">{network.icon}</div>
                  <div className="flex-1">
                    <Label htmlFor={network.id} className="font-medium">
                      {network.name}
                    </Label>
                    <div className="text-sm text-muted-foreground">
                      {network.description}
                    </div>
                  </div>
                  <Badge 
                    variant={network.fee === 'Low' ? 'default' : network.fee === 'Medium' ? 'secondary' : 'destructive'}
                    className="text-xs"
                  >
                    {network.fee} Fee
                  </Badge>
                </div>
              ))}
            </RadioGroup>
          </div>

          <Separator />

          {/* Deposit Address */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Wallet className="w-5 h-5 text-primary" />
              <Label className="font-medium">
                Deposit Address ({networks.find(n => n.id === selectedNetwork)?.name})
              </Label>
            </div>

            <Card className="bg-muted/30">
              <CardContent className="p-4">
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm font-medium">
                    {selectedTokenData?.name} Address
                  </span>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCopyAddress}
                      className="h-8 px-3"
                    >
                      {copied ? (
                        <CheckCircle className="w-4 h-4 text-green-600" />
                      ) : (
                        <Copy className="w-4 h-4" />
                      )}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleViewInExplorer}
                      className="h-8 px-3"
                    >
                      <ExternalLink className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
                
                <div className="font-mono text-sm bg-background p-3 rounded border break-all">
                  {depositAddress}
                </div>
              </CardContent>
            </Card>

            {/* QR Code Placeholder */}
            <Card className="bg-muted/10">
              <CardContent className="p-4 text-center">
                <QrCode className="w-16 h-16 mx-auto mb-2 text-muted-foreground" />
                <p className="text-sm text-muted-foreground">
                  QR Code (Available in mobile app)
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Important Notice */}
          <Card className="border-l-4 border-l-amber-500 bg-amber-50">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <AlertTriangle className="w-5 h-5 text-amber-600 mt-0.5" />
                <div className="text-sm">
                  <strong className="text-amber-800">Important Notice:</strong>
                  <br />
                  <span className="text-amber-700">
                    â€¢ Only send {selectedTokenData?.name} tokens to this address
                    <br />
                    â€¢ Use the {networks.find(n => n.id === selectedNetwork)?.name} network only
                    <br />
                    â€¢ Minimum deposit: Varies by token (typically $10-$100)
                    <br />
                    â€¢ Deposits typically confirm within 3-15 minutes
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-3">
            <Button variant="outline" onClick={onClose} className="flex-1">
              Close
            </Button>
            <Button 
              onClick={handleCopyAddress}
              className="flex-1"
              data-testid="copy-address-btn"
            >
              <Copy className="w-4 h-4 mr-2" />
              {copied ? 'Copied!' : 'Copy Address'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default CryptoDepositModal;