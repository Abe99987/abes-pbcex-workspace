openapi: 3.0.3
info:
  title: PBCEx API
  version: 1.0.0
  description: |
    People's Bank & Commodities Exchange (PBCEx) API for precious metals trading, 
    custody, and fulfillment operations.

    ## Authentication
    All protected endpoints require a Bearer token in the Authorization header:
    ```
    Authorization: Bearer <your-access-token>
    ```

    ## Rate Limits
    - General API: 1000 requests per 15 minutes
    - Authentication: 5 attempts per 15 minutes  
    - KYC submissions: 10 per hour
    - Trading: 30 per minute

  contact:
    name: PBCEx API Support
    email: api-support@pbcex.com
  license:
    name: Proprietary
  x-build-info:
    branch: feature/money-movement-backend
    shortHash: 7b670b4
    generatedAt: '2025-08-31T18:00:00Z'

servers:
  - url: http://localhost:4000
    description: Development server
  - url: https://api.pbcex.com
    description: Production server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - code
        - message
        - timestamp
      properties:
        code:
          type: string
          enum:
            [
              VALIDATION_ERROR,
              AUTHENTICATION_ERROR,
              AUTHORIZATION_ERROR,
              NOT_FOUND,
              CONFLICT,
              RATE_LIMITED,
              INTERNAL_ERROR,
              SERVICE_UNAVAILABLE,
            ]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        details:
          type: object

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [USER, ADMIN, SUPPORT, TELLER]
        kycStatus:
          type: string
          enum:
            [
              NOT_STARTED,
              IN_PROGRESS,
              PENDING_REVIEW,
              APPROVED,
              REJECTED,
              EXPIRED,
            ]
        emailVerified:
          type: boolean
        twoFactorEnabled:
          type: boolean

    Balance:
      type: object
      properties:
        asset:
          type: string
        amount:
          type: string
          pattern: '^\d+\.?\d*$'
        usdValue:
          type: string
          pattern: '^\d+\.?\d*$'

    Trade:
      type: object
      properties:
        id:
          type: string
        fromAsset:
          type: string
        toAsset:
          type: string
        amount:
          type: string
        price:
          type: string
        fee:
          type: string
        status:
          type: string
          enum: [PENDING, FILLED, CANCELLED, FAILED]
        executedAt:
          type: string
          format: date-time

    VaultInventory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        metal:
          type: string
          enum: [AU, AG, PT, PD, CU]
        sku:
          type: string
        format:
          type: string
          enum: [bar, coin, sheet, coil]
        weight:
          type: string
          pattern: '^\d+\.?\d*$'
        vaultLocation:
          type: string
        qtyAvailable:
          type: integer
          minimum: 0
        qtyReserved:
          type: integer
          minimum: 0
        unitCost:
          type: string
          pattern: '^\d+\.?\d*$'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RedemptionRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        asset:
          type: string
          enum: [AU, AG, PT, PD, CU]
        qty:
          type: string
          pattern: '^\d+\.?\d*$'
        format:
          type: string
          enum: [bar, coin, sheet, coil]
        sku:
          type: string
        status:
          type: string
          enum: [pending, approved, shipped, delivered, cancelled]
        shippingAddress:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
            country:
              type: string
        trackingNumber:
          type: string
        fees:
          type: string
          pattern: '^\d+\.?\d*$'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RedemptionQuote:
      type: object
      properties:
        asset:
          type: string
          enum: [AU, AG, PT, PD, CU]
        qty:
          type: string
          pattern: '^\d+\.?\d*$'
        format:
          type: string
          enum: [bar, coin, sheet, coil]
        spotPrice:
          type: string
          pattern: '^\d+\.?\d*$'
        fees:
          type: string
          pattern: '^\d+\.?\d*$'
        totalCost:
          type: string
          pattern: '^\d+\.?\d*$'
        expiresAt:
          type: string
          format: date-time
        availableSkus:
          type: array
          items:
            type: object
            properties:
              sku:
                type: string
              description:
                type: string
              weight:
                type: string
                pattern: '^\d+\.?\d*$'
              premium:
                type: string
                pattern: '^\d+\.?\d*$'

    UserProfile:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        kycStatus:
          type: string
          enum:
            [
              NOT_STARTED,
              IN_PROGRESS,
              PENDING_REVIEW,
              APPROVED,
              REJECTED,
              EXPIRED,
            ]
        orders:
          type: array
          items:
            type: object
        redemptions:
          type: array
          items:
            $ref: '#/components/schemas/RedemptionRequest'

    # Money Movement Schemas (x-inferred: true)
    Beneficiary:
      type: object
      x-inferred: true
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [internal_user, bank_swift, email_link]
        displayName:
          type: string
        details:
          type: object
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaymentRequest:
      type: object
      x-inferred: true
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        mode:
          type: string
          enum: [internal_user, external_link]
        target:
          type: object
        asset:
          type: string
        amount:
          type: string
        memoOptional:
          type: boolean
        allowPartial:
          type: boolean
        expiresAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [draft, active, expired, paid, cancelled]
        linkToken:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    InternalTransfer:
      type: object
      x-inferred: true
      properties:
        id:
          type: string
          format: uuid
        fromUserId:
          type: string
          format: uuid
        toInternalAccountNumber:
          type: string
        asset:
          type: string
        amount:
          type: string
        memo:
          type: string
        status:
          type: string
          enum: [pending, completed, rejected]
        audit:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CryptoWithdrawal:
      type: object
      x-inferred: true
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        asset:
          type: string
        network:
          type: string
        address:
          type: string
        amount:
          type: string
        feeEstimate:
          type: string
        status:
          type: string
          enum: [pending, queued, broadcast, failed, cancelled]
        audit:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BankTransfer:
      type: object
      x-inferred: true
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        beneficiaryId:
          type: string
          format: uuid
        amount:
          type: string
        currency:
          type: string
        purposeCode:
          type: string
        status:
          type: string
          enum: [draft, pending, submitted, failed, cancelled]
        rails:
          type: string
          enum: [swift, wise]
        audit:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RecurringRule:
      type: object
      x-inferred: true
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        name:
          type: string
        asset:
          type: string
        amount:
          type: string
        frequency:
          type: string
          enum: [daily, weekly, monthly, quarterly, yearly]
        nextRun:
          type: string
          format: date-time
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DCAPlan:
      type: object
      x-inferred: true
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        name:
          type: string
        asset:
          type: string
        amount:
          type: string
        frequency:
          type: string
          enum: [daily, weekly, monthly, quarterly, yearly]
        nextRun:
          type: string
          format: date-time
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QRToken:
      type: object
      x-inferred: true
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        type:
          type: string
          enum: [pay, receive]
        asset:
          type: string
        amount:
          type: string
        expiresAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, used, expired, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  # Money Movement Endpoints
  /api/transfers/internal:
    post:
      tags: [Transfers]
      summary: Create internal transfer
      description: Transfer assets between internal accounts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [toInternalAccountNumber, asset, amount]
              properties:
                toInternalAccountNumber:
                  type: string
                  description: Internal account number to transfer to
                asset:
                  type: string
                  enum: [AU, AG, PT, PD, CU, USD, USDC]
                  description: Asset to transfer
                amount:
                  type: string
                  pattern: '^\d+\.?\d*$'
                  description: Amount to transfer
                memo:
                  type: string
                  description: Optional memo for the transfer
      responses:
        '201':
          description: Internal transfer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: SUCCESS
                  data:
                    $ref: '#/components/schemas/InternalTransfer'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Insufficient balance or transfer not allowed

  /api/transfers/internal/{id}:
    get:
      tags: [Transfers]
      summary: Get internal transfer status
      description: Retrieve the status of an internal transfer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Transfer ID
      responses:
        '200':
          description: Transfer status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: SUCCESS
                  data:
                    $ref: '#/components/schemas/InternalTransfer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/transfers/bank:
    post:
      tags: [Transfers]
      summary: Create bank transfer
      description: Initiate a bank transfer to external beneficiary
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [beneficiaryId, amount, currency]
              properties:
                beneficiaryId:
                  type: string
                  format: uuid
                  description: ID of the bank beneficiary
                amount:
                  type: string
                  pattern: '^\d+\.?\d*$'
                  description: Amount to transfer
                currency:
                  type: string
                  enum: [USD, EUR, GBP, CAD, AUD]
                  description: Currency for the transfer
                purposeCode:
                  type: string
                  description: Optional purpose code for the transfer
      responses:
        '201':
          description: Bank transfer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: SUCCESS
                  data:
                    $ref: '#/components/schemas/BankTransfer'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Insufficient balance or transfer not allowed

  /api/transfers/bank/{id}:
    get:
      tags: [Transfers]
      summary: Get bank transfer status
      description: Retrieve the status of a bank transfer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Transfer ID
      responses:
        '200':
          description: Transfer status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: SUCCESS
                  data:
                    $ref: '#/components/schemas/BankTransfer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/transfers/bank/estimate-fees:
    post:
      tags: [Transfers]
      summary: Estimate bank transfer fees
      description: Get estimated fees for a bank transfer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount, currency, rails]
              properties:
                amount:
                  type: string
                  pattern: '^\d+\.?\d*$'
                  description: Transfer amount
                currency:
                  type: string
                  enum: [USD, EUR, GBP, CAD, AUD]
                  description: Transfer currency
                rails:
                  type: string
                  enum: [swift, wise]
                  description: Transfer rails to use
      responses:
        '200':
          description: Fee estimate retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: SUCCESS
                  data:
                    type: object
                    properties:
                      estimatedFee:
                        type: string
                        description: Estimated fee amount
                      currency:
                        type: string
                        description: Fee currency
                      estimatedDelivery:
                        type: string
                        description: Estimated delivery time
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/transfers/history:
    get:
      tags: [Transfers]
      summary: Get transfer history
      description: Retrieve transfer history for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [internal, bank, crypto]
          description: Filter by transfer type
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, completed, rejected, failed, cancelled]
          description: Filter by transfer status
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of records to return
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of records to skip
      responses:
        '200':
          description: Transfer history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: SUCCESS
                  data:
                    type: object
                    properties:
                      transfers:
                        type: array
                        items:
                          oneOf:
                            - $ref: '#/components/schemas/InternalTransfer'
                            - $ref: '#/components/schemas/BankTransfer'
                            - $ref: '#/components/schemas/CryptoWithdrawal'
                      total:
                        type: integer
                        description: Total number of transfers
                      hasMore:
                        type: boolean
                        description: Whether there are more records
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Health endpoint
  /health:
    get:
      tags: [Health]
      summary: Health check
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                  version:
                    type: string

  /api/auth/register:
    post:
      tags: [Authentication]
      summary: Register new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation error
        '409':
          description: User already exists

  /api/auth/login:
    post:
      tags: [Authentication]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /api/auth/me:
    get:
      tags: [Authentication]
      summary: Get current user profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'

  /api/wallet/balances:
    get:
      tags: [Wallet]
      summary: Get account balances
      responses:
        '200':
          description: Account balances
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      funding:
                        type: object
                        properties:
                          balances:
                            type: array
                            items:
                              $ref: '#/components/schemas/Balance'
                      trading:
                        type: object
                        properties:
                          balances:
                            type: array
                            items:
                              $ref: '#/components/schemas/Balance'

  /api/trade/prices:
    get:
      tags: [Trading]
      summary: Get current asset prices
      parameters:
        - name: asset
          in: query
          schema:
            type: string
            enum: [AU, AG, PT, PD, CU]
      responses:
        '200':
          description: Current prices

  /api/trade/order:
    post:
      tags: [Trading]
      summary: Place market conversion order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fromAsset, toAsset, amount]
              properties:
                fromAsset:
                  type: string
                toAsset:
                  type: string
                amount:
                  type: string
                  pattern: '^\d+\.?\d*$'
      responses:
        '201':
          description: Trade executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      trade:
                        $ref: '#/components/schemas/Trade'

  /api/shop/products:
    get:
      tags: [Shop]
      summary: List available products
      security: []
      parameters:
        - name: metal
          in: query
          schema:
            type: string
            enum: [AU, AG, PT, PD, CU]
        - name: category
          in: query
          schema:
            type: string
            enum: [COINS, BARS, ROUNDS, JEWELRY]
      responses:
        '200':
          description: Product list

  /api/admin/exposure:
    get:
      tags: [Admin]
      summary: View system exposure
      responses:
        '200':
          description: Exposure data
        '403':
          description: Admin access required

  # Phase-3 Redemption Endpoints
  /api/redeem:
    post:
      tags: [Redemption]
      summary: Request physical asset redemption
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [asset, qty, format, shippingAddress]
              properties:
                asset:
                  type: string
                  enum: [AU, AG, PT, PD, CU]
                qty:
                  type: string
                  pattern: '^\d+\.?\d*$'
                format:
                  type: string
                  enum: [bar, coin, sheet, coil]
                preferredSku:
                  type: string
                shippingAddress:
                  type: object
                  required: [street, city, state, zipCode, country]
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
                    country:
                      type: string
      responses:
        '201':
          description: Redemption request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      redemption:
                        $ref: '#/components/schemas/RedemptionRequest'
        '400':
          description: Invalid request
        '501':
          description: Feature disabled

  /api/redeem/status/{id}:
    get:
      tags: [Redemption]
      summary: Get redemption request status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Redemption request status
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      redemption:
                        $ref: '#/components/schemas/RedemptionRequest'
        '404':
          description: Redemption request not found
        '501':
          description: Feature disabled

  /api/redeem/quote:
    get:
      tags: [Redemption]
      summary: Get redemption quote
      parameters:
        - name: asset
          in: query
          required: true
          schema:
            type: string
            enum: [AU, AG, PT, PD, CU]
        - name: qty
          in: query
          required: true
          schema:
            type: string
            pattern: '^\d+\.?\d*$'
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [bar, coin, sheet, coil]
      responses:
        '200':
          description: Redemption quote
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      quote:
                        $ref: '#/components/schemas/RedemptionQuote'
        '400':
          description: Invalid parameters
        '501':
          description: Feature disabled

  # Phase-3 Vault Management Endpoints (Admin Only)
  /api/vault/inventory:
    get:
      tags: [Vault]
      summary: View vault inventory (Admin only)
      parameters:
        - name: metal
          in: query
          schema:
            type: string
            enum: [AU, AG, PT, PD, CU]
        - name: location
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Vault inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      inventory:
                        type: array
                        items:
                          $ref: '#/components/schemas/VaultInventory'
        '403':
          description: Admin access required
        '501':
          description: Feature disabled

  /api/vault/inventory/restock:
    post:
      tags: [Vault]
      summary: Restock vault inventory (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [metal, sku, qty, unitCost]
              properties:
                metal:
                  type: string
                  enum: [AU, AG, PT, PD, CU]
                sku:
                  type: string
                qty:
                  type: integer
                  minimum: 1
                unitCost:
                  type: string
                  pattern: '^\d+\.?\d*$'
                vaultLocation:
                  type: string
      responses:
        '200':
          description: Inventory restocked
        '403':
          description: Admin access required
        '501':
          description: Feature disabled

  /api/vault/redemptions/{id}/approve:
    post:
      tags: [Vault]
      summary: Approve redemption request (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Redemption approved
        '403':
          description: Admin access required
        '404':
          description: Redemption not found
        '501':
          description: Feature disabled

  /api/vault/redemptions/{id}/ship:
    post:
      tags: [Vault]
      summary: Mark redemption as shipped (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [trackingNumber]
              properties:
                trackingNumber:
                  type: string
                carrier:
                  type: string
                expectedDelivery:
                  type: string
                  format: date
      responses:
        '200':
          description: Redemption marked as shipped
        '403':
          description: Admin access required
        '404':
          description: Redemption not found
        '501':
          description: Feature disabled

  # Phase-3 Support/Customer Service Endpoints
  /api/support/user/{id}:
    get:
      tags: [Support]
      summary: Get user profile for support (Support/Teller only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile with support details
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      profile:
                        $ref: '#/components/schemas/UserProfile'
        '403':
          description: Support or Teller access required
        '404':
          description: User not found

  /api/support/user/{id}/reset-password:
    post:
      tags: [Support]
      summary: Reset user password (Support/Teller only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                notifyUser:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Password reset successfully
        '403':
          description: Support or Teller access required
        '404':
          description: User not found

  /api/support/order/{id}/adjust:
    post:
      tags: [Support]
      summary: Adjust order (Support/Teller only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, reason]
              properties:
                action:
                  type: string
                  enum: [cancel, refund, modify_status]
                reason:
                  type: string
                newStatus:
                  type: string
                refundAmount:
                  type: string
                  pattern: '^\d+\.?\d*$'
      responses:
        '200':
          description: Order adjusted successfully
        '403':
          description: Support or Teller access required
        '404':
          description: Order not found

  /api/support/search:
    get:
      tags: [Support]
      summary: Search users (Support/Teller only)
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 3
        - name: type
          in: query
          schema:
            type: string
            enum: [email, name, phone, userId]
            default: email
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            email:
                              type: string
                            firstName:
                              type: string
                            lastName:
                              type: string
                            kycStatus:
                              type: string
                            lastActivity:
                              type: string
                              format: date-time
        '400':
          description: Invalid search query
        '403':
          description: Support or Teller access required

tags:
  - name: Health
    description: Service health endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: KYC
    description: Know Your Customer verification
  - name: Wallet
    description: Account and balance management
  - name: Trading
    description: Asset trading operations
  - name: Shop
    description: Physical precious metals marketplace
  - name: Admin
    description: Administrative operations
  - name: Redemption
    description: Physical asset redemption and delivery (Phase-3)
  - name: Vault
    description: Vault inventory and redemption management (Phase-3)
  - name: Support
    description: Customer service and support operations (Phase-3)
  - name: Transfers
    description: Internal and external money transfers
  - name: Crypto
    description: Cryptocurrency operations and withdrawals
  - name: Beneficiaries
    description: Transfer beneficiary management
  - name: QR
    description: QR code payment tokens
  - name: Payment Requests
    description: Payment request creation and management
  - name: Recurring
    description: Recurring transfer rules
  - name: Card Funding
    description: Card funding preferences and settings
  - name: DCA
    description: Dollar Cost Averaging plans
