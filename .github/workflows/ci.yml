name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: ['**']

# Allow the workflow to inherit repository secrets
env:
  NODE_ENV: test

jobs:
  # Setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      backend-cache-key: ${{ steps.backend-cache.outputs.cache-hit }}
      frontend-cache-key: ${{ steps.frontend-cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache backend node_modules
        id: backend-cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: backend-deps-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            backend-deps-

      - name: Cache frontend node_modules  
        id: frontend-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: frontend-deps-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            frontend-deps-

      - name: Install backend dependencies
        if: steps.backend-cache.outputs.cache-hit != 'true'
        run: |
          cd backend
          npm ci --prefer-offline --no-audit

      - name: Install frontend dependencies
        if: steps.frontend-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

  # Backend linting
  lint_backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Restore backend cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: backend-deps-${{ hashFiles('backend/package-lock.json') }}

      - name: Install backend dependencies (if cache miss)
        run: |
          cd backend
          if [ ! -d "node_modules" ]; then npm ci --prefer-offline --no-audit; fi

      - name: Run backend linting
        run: |
          cd backend
          npm run lint

      - name: Check TypeScript compilation
        run: |
          cd backend
          npx tsc --noEmit

  # Backend testing
  test_backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: setup
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Restore backend cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: backend-deps-${{ hashFiles('backend/package-lock.json') }}

      - name: Install backend dependencies (if cache miss)
        run: |
          cd backend
          if [ ! -d "node_modules" ]; then npm ci --prefer-offline --no-audit; fi

      - name: Run backend unit tests
        run: |
          cd backend
          npm run test:unit
        env:
          # Test environment variables (no real API keys)
          NODE_ENV: test
          JWT_SECRET: test_jwt_secret_32_characters_long
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://test:test@localhost:5432/test
          # Mock API endpoints to prevent external calls
          COINGECKO_BASE_URL: http://localhost:8999/mock
          FEDEX_BASE_URL: http://localhost:8999/mock
          RESEND_API_KEY: test_key
          TWILIO_ACCOUNT_SID: test_sid
          TWILIO_AUTH_TOKEN: test_token

  # Backend build
  build_backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Restore backend cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: backend-deps-${{ hashFiles('backend/package-lock.json') }}

      - name: Install backend dependencies (if cache miss)
        run: |
          cd backend
          if [ ! -d "node_modules" ]; then npm ci --prefer-offline --no-audit; fi

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 1

  # Frontend linting
  lint_frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Restore frontend cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: frontend-deps-${{ hashFiles('package-lock.json') }}

      - name: Install frontend dependencies (if cache miss)
        run: |
          if [ ! -d "node_modules" ]; then npm ci --prefer-offline --no-audit; fi

      - name: Run frontend linting
        run: npm run lint

      - name: Check TypeScript compilation
        run: npx tsc --noEmit

  # Frontend testing (conditional - only if tests exist)
  test_frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: setup
    # Only run if test script exists in package.json
    if: contains(github.event.head_commit.message, 'skip-frontend-tests') == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Restore frontend cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: frontend-deps-${{ hashFiles('package-lock.json') }}

      - name: Install frontend dependencies (if cache miss)
        run: |
          if [ ! -d "node_modules" ]; then npm ci --prefer-offline --no-audit; fi

      - name: Check if tests exist
        id: check_tests
        run: |
          if [ -d "src/__tests__" ] || [ -d "test" ] || [ -d "tests" ] || grep -q '"test"' package.json; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run frontend tests
        if: steps.check_tests.outputs.has_tests == 'true'
        run: npm test -- --watchAll=false --coverage=false
        env:
          CI: true

      - name: Skip tests (none found)
        if: steps.check_tests.outputs.has_tests == 'false'
        run: echo "No frontend tests found, skipping test step"

  # Frontend build
  build_frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Restore frontend cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: frontend-deps-${{ hashFiles('package-lock.json') }}

      - name: Install frontend dependencies (if cache miss)
        run: |
          if [ ! -d "node_modules" ]; then npm ci --prefer-offline --no-audit; fi

      - name: Build frontend
        run: npm run build
        env:
          # Build-time environment variables
          VITE_API_BASE_URL: https://api.pbcex.com
          NODE_ENV: production

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: dist/
          retention-days: 1

  # Security audit (optional but recommended)
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true # Don't fail the entire pipeline on audit issues
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Audit backend dependencies
        run: |
          cd backend
          npm audit --audit-level moderate || echo "Backend audit completed with warnings"

      - name: Audit frontend dependencies
        run: npm audit --audit-level moderate || echo "Frontend audit completed with warnings"

  # Summary job
  ci_summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint_backend, test_backend, build_backend, lint_frontend, test_frontend, build_frontend]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Lint: ${{ needs.lint_backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Test: ${{ needs.test_backend.result }}" >> $GITHUB_STEP_SUMMARY  
          echo "- Backend Build: ${{ needs.build_backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Lint: ${{ needs.lint_frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Test: ${{ needs.test_frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Build: ${{ needs.build_frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if any required job failed
          if [[ "${{ needs.lint_backend.result }}" != "success" || \
                "${{ needs.test_backend.result }}" != "success" || \
                "${{ needs.build_backend.result }}" != "success" || \
                "${{ needs.lint_frontend.result }}" != "success" || \
                "${{ needs.build_frontend.result }}" != "success" ]]; then
            echo "❌ CI Pipeline failed - some jobs did not complete successfully" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ CI Pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi