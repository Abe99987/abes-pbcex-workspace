{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "PBCEx API",
		"description": "People's Bank & Commodities Exchange API Collection\n\nThis collection covers:\n- MVP endpoints (Auth, KYC, Wallet, Trading, Shop)\n- Admin operations\n- Phase-3 features (Vault, Redemption, Support)\n- A/B Testing & Analytics\n\nUsage:\n1. Import collection + environment\n2. Set {{baseUrl}} in environment\n3. Run Auth/Login to populate tokens\n4. Execute requests or use Collection Runner\n\nFor Phase-3 testing:\n- Set ENABLE_VAULT_REDEMPTION=true in backend\n- Set FULFILLMENT_STRATEGY=JM or BRINKS\n- Restart backend service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health check successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('status');",
									"    pm.expect(responseJson.status).to.eql('healthy');",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": [
						{
							"name": "Health Check Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/health",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-30T10:30:00.000Z\",\n  \"version\": \"1.0.0\",\n  \"environment\": \"development\",\n  \"uptime\": 3600.5,\n  \"memory\": {\n    \"rss\": 45678912,\n    \"heapTotal\": 23456789,\n    \"heapUsed\": 12345678,\n    \"external\": 1234567\n  },\n  \"services\": {\n    \"priceFeed\": {\n      \"status\": \"healthy\",\n      \"lastUpdate\": \"2024-01-30T10:29:30.000Z\"\n    },\n    \"notifications\": {\n      \"status\": \"healthy\"\n    },\n    \"database\": {\n      \"status\": \"mock\"\n    },\n    \"redis\": {\n      \"status\": \"mock\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Registration successful\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('user');",
									"});",
									"",
									"pm.test(\"User has required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const user = responseJson.data.user;",
									"    pm.expect(user).to.have.property('id');",
									"    pm.expect(user).to.have.property('email');",
									"    pm.expect(user).to.have.property('firstName');",
									"    pm.expect(user).to.have.property('lastName');",
									"    pm.expect(user).to.have.property('role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains token\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('token');",
									"    pm.expect(responseJson.data.token).to.be.a('string');",
									"    ",
									"    // Store token in environment variable",
									"    pm.environment.set('userToken', responseJson.data.token);",
									"});",
									"",
									"pm.test(\"Token is valid JWT format\", function () {",
									"    const responseJson = pm.response.json();",
									"    const token = responseJson.data.token;",
									"    // Basic JWT format check (3 parts separated by dots)",
									"    const jwtParts = token.split('.');",
									"    pm.expect(jwtParts).to.have.lengthOf(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains admin token\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('token');",
									"    pm.expect(responseJson.data.token).to.be.a('string');",
									"    ",
									"    // Store admin token in environment variable",
									"    pm.environment.set('adminToken', responseJson.data.token);",
									"});",
									"",
									"pm.test(\"User has admin role\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.user.role).to.eql('ADMIN');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@pbcex.com\",\n  \"password\": \"AdminPassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Profile retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile contains user data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('user');",
									"    ",
									"    const user = responseJson.data.user;",
									"    pm.expect(user).to.have.property('id');",
									"    pm.expect(user).to.have.property('email');",
									"    pm.expect(user).to.have.property('role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration, login, and profile management."
		},
		{
			"name": "KYC",
			"item": [
				{
					"name": "Submit Personal KYC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"KYC submission successful\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains submission data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson).to.have.property('data');",
									"});",
									"",
									"pm.test(\"KYC status is pending\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.have.property('status');",
									"    pm.expect(['PENDING_REVIEW', 'IN_PROGRESS']).to.include(responseJson.data.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"personalInfo\": {\n    \"fullName\": \"John Michael Doe\",\n    \"dateOfBirth\": \"1990-05-15\",\n    \"ssn\": \"123-45-6789\",\n    \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Dallas\",\n      \"state\": \"TX\",\n      \"zipCode\": \"75201\",\n      \"country\": \"US\"\n    },\n    \"phone\": \"+1-555-123-4567\"\n  },\n  \"documents\": {\n    \"driversLicense\": {\n      \"number\": \"DL12345678\",\n      \"state\": \"TX\",\n      \"expirationDate\": \"2028-05-15\"\n    }\n  },\n  \"questionnaire\": {\n    \"employmentStatus\": \"employed\",\n    \"annualIncome\": \"50000-100000\",\n    \"investmentExperience\": \"intermediate\",\n    \"riskTolerance\": \"moderate\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/kyc/submit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"kyc",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get KYC Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"KYC status retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status response is valid\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('status');",
									"    ",
									"    const validStatuses = ['NOT_STARTED', 'IN_PROGRESS', 'PENDING_REVIEW', 'APPROVED', 'REJECTED', 'EXPIRED'];",
									"    pm.expect(validStatuses).to.include(responseJson.data.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/kyc/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"kyc",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"description": "Know Your Customer (KYC) compliance endpoints for identity verification."
		},
		{
			"name": "Wallet",
			"item": [
				{
					"name": "Get Account Balances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Balances retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains balance data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('funding');",
									"    pm.expect(responseJson.data).to.have.property('trading');",
									"});",
									"",
									"pm.test(\"Balances have required structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const funding = responseJson.data.funding;",
									"    const trading = responseJson.data.trading;",
									"    ",
									"    pm.expect(funding).to.have.property('balances');",
									"    pm.expect(trading).to.have.property('balances');",
									"    pm.expect(funding.balances).to.be.an('array');",
									"    pm.expect(trading.balances).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/wallet/balances",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"wallet",
								"balances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transfer PAXG to XAU-s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Transfer successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer response is valid\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('transaction');",
									"});",
									"",
									"pm.test(\"Transaction has required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const transaction = responseJson.data.transaction;",
									"    pm.expect(transaction).to.have.property('id');",
									"    pm.expect(transaction).to.have.property('fromAsset');",
									"    pm.expect(transaction).to.have.property('toAsset');",
									"    pm.expect(transaction).to.have.property('amount');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromAsset\": \"PAXG\",\n  \"toAsset\": \"XAU-s\",\n  \"amount\": \"0.5\",\n  \"fromAccount\": \"funding\",\n  \"toAccount\": \"trading\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/wallet/transfer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"wallet",
								"transfer"
							]
						}
					},
					"response": []
				}
			],
			"description": "Wallet management endpoints for balance checking and internal transfers."
		},
		{
			"name": "Trade",
			"item": [
				{
					"name": "Get Asset Prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Prices retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains price data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('prices');",
									"});",
									"",
									"pm.test(\"Prices have required structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const prices = responseJson.data.prices;",
									"    pm.expect(prices).to.be.an('object');",
									"    ",
									"    // Check if AU price exists and has proper structure",
									"    if (prices.AU) {",
									"        pm.expect(prices.AU).to.have.property('bid');",
									"        pm.expect(prices.AU).to.have.property('ask');",
									"        pm.expect(prices.AU).to.have.property('spread');",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/trade/prices?asset=AU",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"trade",
								"prices"
							],
							"query": [
								{
									"key": "asset",
									"value": "AU"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Market Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Trade order successful\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Trade response contains order data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('trade');",
									"});",
									"",
									"pm.test(\"Trade has required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const trade = responseJson.data.trade;",
									"    pm.expect(trade).to.have.property('id');",
									"    pm.expect(trade).to.have.property('fromAsset');",
									"    pm.expect(trade).to.have.property('toAsset');",
									"    pm.expect(trade).to.have.property('amount');",
									"    pm.expect(trade).to.have.property('price');",
									"    pm.expect(trade).to.have.property('fee');",
									"    pm.expect(trade).to.have.property('status');",
									"});",
									"",
									"pm.test(\"Trade status is valid\", function () {",
									"    const responseJson = pm.response.json();",
									"    const validStatuses = ['PENDING', 'FILLED', 'CANCELLED', 'FAILED'];",
									"    pm.expect(validStatuses).to.include(responseJson.data.trade.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromAsset\": \"USD\",\n  \"toAsset\": \"AU\",\n  \"amount\": \"1000.00\",\n  \"orderType\": \"market\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/trade/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"trade",
								"order"
							]
						}
					},
					"response": []
				}
			],
			"description": "Trading endpoints for price discovery and order execution."
		},
		{
			"name": "Shop",
			"item": [
				{
					"name": "List Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Products retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains products\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('products');",
									"    pm.expect(responseJson.data.products).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Products have required structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const products = responseJson.data.products;",
									"    ",
									"    if (products.length > 0) {",
									"        const product = products[0];",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('metal');",
									"        pm.expect(product).to.have.property('weight');",
									"        pm.expect(product).to.have.property('price');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/shop/products?metal=AU&category=BARS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"shop",
								"products"
							],
							"query": [
								{
									"key": "metal",
									"value": "AU"
								},
								{
									"key": "category",
									"value": "BARS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lock Price Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Quote lock successful\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains quote data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('quote');",
									"});",
									"",
									"pm.test(\"Quote has required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const quote = responseJson.data.quote;",
									"    pm.expect(quote).to.have.property('id');",
									"    pm.expect(quote).to.have.property('productId');",
									"    pm.expect(quote).to.have.property('price');",
									"    pm.expect(quote).to.have.property('expiresAt');",
									"    ",
									"    // Store quote ID for checkout",
									"    pm.environment.set('quoteId', quote.id);",
									"});",
									"",
									"pm.test(\"Quote expiry is in future\", function () {",
									"    const responseJson = pm.response.json();",
									"    const expiresAt = new Date(responseJson.data.quote.expiresAt);",
									"    const now = new Date();",
									"    pm.expect(expiresAt.getTime()).to.be.greaterThan(now.getTime());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": \"prod_au_bar_1oz\",\n  \"quantity\": 5,\n  \"lockDurationMinutes\": 10\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/shop/lock-quote",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"shop",
								"lock-quote"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checkout with Locked Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checkout successful\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains order data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('order');",
									"});",
									"",
									"pm.test(\"Order has required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const order = responseJson.data.order;",
									"    pm.expect(order).to.have.property('id');",
									"    pm.expect(order).to.have.property('quoteId');",
									"    pm.expect(order).to.have.property('status');",
									"    pm.expect(order).to.have.property('totalAmount');",
									"    pm.expect(order).to.have.property('fulfillmentMethod');",
									"});",
									"",
									"pm.test(\"Order uses correct quote\", function () {",
									"    const responseJson = pm.response.json();",
									"    const quoteId = pm.environment.get('quoteId');",
									"    pm.expect(responseJson.data.order.quoteId).to.eql(quoteId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"shippingAddress\": {\n    \"name\": \"John Doe\",\n    \"street\": \"123 Main Street\",\n    \"city\": \"Dallas\",\n    \"state\": \"TX\",\n    \"zipCode\": \"75201\",\n    \"country\": \"US\"\n  },\n  \"paymentMethod\": \"xau_balance\",\n  \"fulfillmentPreference\": \"standard\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/shop/checkout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"shop",
								"checkout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Physical precious metals shop endpoints for browsing, quoting, and purchasing products."
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get System Exposure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exposure data retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains exposure data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('exposure');",
									"});",
									"",
									"pm.test(\"Exposure data has required structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const exposure = responseJson.data.exposure;",
									"    pm.expect(exposure).to.have.property('totalExposure');",
									"    pm.expect(exposure).to.have.property('byAsset');",
									"    pm.expect(exposure.byAsset).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/exposure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"exposure"
							]
						}
					},
					"response": []
				}
			],
			"description": "Administrative endpoints for system monitoring and management (requires ADMIN role)."
		},
		{
			"name": "Phase-3 (Feature Gated)",
			"item": [
				{
					"name": "Request Redemption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Phase-3 features may return 501 if disabled",
									"pm.test(\"Redemption request handled correctly\", function () {",
									"    const status = pm.response.code;",
									"    // 501 = feature disabled, 201 = feature enabled and successful",
									"    pm.expect([201, 501]).to.include(status);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    pm.test(\"Redemption created successfully\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('data');",
									"        pm.expect(responseJson.data).to.have.property('redemption');",
									"        ",
									"        const redemption = responseJson.data.redemption;",
									"        pm.expect(redemption).to.have.property('id');",
									"        pm.expect(redemption).to.have.property('asset');",
									"        pm.expect(redemption).to.have.property('status');",
									"        ",
									"        // Store redemption ID for status check",
									"        pm.environment.set('redemptionId', redemption.id);",
									"    });",
									"} else if (pm.response.code === 501) {",
									"    pm.test(\"Feature properly disabled\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('code');",
									"        pm.expect(responseJson.code).to.include('NOT_IMPLEMENTED');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"asset\": \"AU\",\n  \"qty\": \"1.0\",\n  \"format\": \"bar\",\n  \"preferredSku\": \"AU_BAR_1OZ_PAMP\",\n  \"shippingAddress\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Dallas\",\n    \"state\": \"TX\",\n    \"zipCode\": \"75201\",\n    \"country\": \"US\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/redeem",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"redeem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Redemption Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status request handled correctly\", function () {",
									"    const status = pm.response.code;",
									"    pm.expect([200, 404, 501]).to.include(status);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Status retrieved successfully\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('data');",
									"        pm.expect(responseJson.data).to.have.property('redemption');",
									"        ",
									"        const redemption = responseJson.data.redemption;",
									"        pm.expect(redemption).to.have.property('status');",
									"        ",
									"        const validStatuses = ['pending', 'approved', 'shipped', 'delivered', 'cancelled'];",
									"        pm.expect(validStatuses).to.include(redemption.status);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/redeem/status/{{redemptionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"redeem",
								"status",
								"{{redemptionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Redemption Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Quote request handled correctly\", function () {",
									"    const status = pm.response.code;",
									"    pm.expect([200, 501]).to.include(status);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Quote retrieved successfully\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('data');",
									"        pm.expect(responseJson.data).to.have.property('quote');",
									"        ",
									"        const quote = responseJson.data.quote;",
									"        pm.expect(quote).to.have.property('asset');",
									"        pm.expect(quote).to.have.property('qty');",
									"        pm.expect(quote).to.have.property('spotPrice');",
									"        pm.expect(quote).to.have.property('fees');",
									"        pm.expect(quote).to.have.property('totalCost');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/redeem/quote?asset=AU&qty=1.0&format=bar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"redeem",
								"quote"
							],
							"query": [
								{
									"key": "asset",
									"value": "AU"
								},
								{
									"key": "qty",
									"value": "1.0"
								},
								{
									"key": "format",
									"value": "bar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Vault Inventory (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Inventory request handled correctly\", function () {",
									"    const status = pm.response.code;",
									"    pm.expect([200, 403, 501]).to.include(status);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Inventory retrieved successfully\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('data');",
									"        pm.expect(responseJson.data).to.have.property('inventory');",
									"        pm.expect(responseJson.data.inventory).to.be.an('array');",
									"    });",
									"} else if (pm.response.code === 403) {",
									"    pm.test(\"Access properly restricted\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('code');",
									"        pm.expect(responseJson.code).to.include('AUTHORIZATION_ERROR');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/vault/inventory?metal=AU",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"vault",
								"inventory"
							],
							"query": [
								{
									"key": "metal",
									"value": "AU"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Phase-3 features for physical asset redemption and vault operations. May return 501 if features are disabled."
		},
		{
			"name": "Experiments & Analytics",
			"item": [
				{
					"name": "Get Experiment Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Assignments retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains assignment data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('assignments');",
									"});",
									"",
									"pm.test(\"Assignments have required structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const assignments = responseJson.data.assignments;",
									"    pm.expect(assignments).to.be.an('object');",
									"    ",
									"    // Check if any assignment exists",
									"    const assignmentKeys = Object.keys(assignments);",
									"    if (assignmentKeys.length > 0) {",
									"        const firstAssignment = assignments[assignmentKeys[0]];",
									"        pm.expect(firstAssignment).to.have.property('experimentKey');",
									"        pm.expect(firstAssignment).to.have.property('variant');",
									"        pm.expect(firstAssignment).to.have.property('userId');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/analytics/experiments/assignments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"analytics",
								"experiments",
								"assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Experiment Variants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Experiment assignment successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains assignment data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('assignments');",
									"});",
									"",
									"pm.test(\"Onboarding experiment assigned\", function () {",
									"    const responseJson = pm.response.json();",
									"    const assignments = responseJson.data.assignments;",
									"    ",
									"    if (assignments.onboarding_form_length) {",
									"        const assignment = assignments.onboarding_form_length;",
									"        pm.expect(assignment.experimentKey).to.eql('onboarding_form_length');",
									"        pm.expect(['multi_step', 'single_page']).to.include(assignment.variant);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"experiments\": [\n    \"onboarding_form_length\",\n    \"order_form_layout\",\n    \"spread_hint_tooltip\"\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/analytics/experiments/assign",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"analytics",
								"experiments",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Track Analytics Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Event tracked successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms event logging\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson.code).to.eql('EVENT_LOGGED');",
									"});",
									"",
									"pm.test(\"Event timestamp returned\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.data).to.have.property('timestamp');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventType\": \"experiment_view\",\n  \"properties\": {\n    \"page\": \"/trade\",\n    \"component\": \"OrderForm\",\n    \"action\": \"form_interaction\"\n  },\n  \"experimentData\": {\n    \"experimentKey\": \"order_form_layout\",\n    \"variant\": \"compact\"\n  },\n  \"context\": {\n    \"page\": \"/trade\",\n    \"userAgent\": \"PostmanRuntime/7.32.3\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/analytics/event",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"analytics",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Track Performance Metric",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Performance metric logged successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms metric logging\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson.code).to.eql('PERFORMANCE_LOGGED');",
									"});",
									"",
									"pm.test(\"Performance data returned\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.have.property('operation');",
									"    pm.expect(responseJson.data).to.have.property('duration');",
									"    pm.expect(responseJson.data).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\": \"page_load\",\n  \"duration\": 1250,\n  \"success\": true,\n  \"properties\": {\n    \"page\": \"/trade\",\n    \"cached\": false,\n    \"connectionType\": \"4g\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/analytics/performance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"analytics",
								"performance"
							]
						}
					},
					"response": []
				}
			],
			"description": "A/B testing and analytics endpoints for experiment management and event tracking."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script for PBCEx API",
					"",
					"// Add request timestamp",
					"pm.request.addHeader({",
					"    key: 'X-Request-Timestamp',",
					"    value: new Date().toISOString()",
					"});",
					"",
					"// Add request ID for tracing",
					"pm.request.addHeader({",
					"    key: 'X-Request-ID',",
					"    value: pm.variables.replaceIn('{{$randomUUID}}').toLowerCase()",
					"});",
					"",
					"// Log request for debugging",
					"console.log(`📤 ${pm.request.method} ${pm.request.url}`);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for PBCEx API",
					"",
					"// Log response for debugging",
					"console.log(`📥 ${pm.response.code} ${pm.request.method} ${pm.request.url} (${pm.response.responseTime}ms)`);",
					"",
					"// Global response time check",
					"pm.test(\"Response time is reasonable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global content type check for JSON responses",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test(\"Response has JSON content type\", function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}",
					"",
					"// Check for standard error format on 4xx/5xx responses",
					"if (pm.response.code >= 400) {",
					"    pm.test(\"Error response has standard format\", function () {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson).to.have.property('code');",
					"        pm.expect(responseJson).to.have.property('message');",
					"        pm.expect(responseJson).to.have.property('timestamp');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:4001",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "quoteId",
			"value": "",
			"type": "string"
		},
		{
			"key": "redemptionId",
			"value": "",
			"type": "string"
		}
	]
}
